
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Dell
 */
public class AppliancesInfo extends javax.swing.JFrame {

    /**
     * Creates new form AppliancesInfo
     */
    // Creating an object of ArrayList of type 'TableData'
    private final ArrayList<TableData> list = new ArrayList();
    // Declaring global variables
    private String range;
    private boolean sortByPrice;
    private boolean sortByBrand;
    private int importtimes;
    private Font customFont;
    private int addCount;
    private boolean imported;
    private String dataRow[];

    public AppliancesInfo() {
        initComponents();
        // Invoking showData and showTime methods
        showDate();
        showTime();
    }

    // This method is used to show current date
    void showDate() {
        Date date = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        lblDate.setText(dateFormat.format(date));
        lblDate.setFont(customFont("DS-DIGI"));
    }

    // This method displays current time
    void showTime() {
        new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Date date = new Date();
                SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm:ss a");
                lblTime.setText(dateFormat.format(date));
                lblTime.setFont(customFont("DS-DIGI"));
            }
        }).start();
    }

    // Creating custom font
    Font customFont(String name) {
        String path = "src\\font\\" + name + ".TTF";
        try {
            // create a custom font
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            Font customFont = Font.createFont(Font.TRUETYPE_FONT, new File(path));
            ge.registerFont(customFont);
            return customFont.deriveFont(Font.BOLD, 18f);
        } catch (FontFormatException | IOException e) {
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupRadio = new javax.swing.ButtonGroup();
        pnlInputs = new javax.swing.JPanel();
        radMedium = new javax.swing.JRadioButton();
        lblSliderQuantity = new javax.swing.JLabel();
        cmbStorageType = new javax.swing.JComboBox();
        lblBrand = new javax.swing.JLabel();
        sldQuantity = new javax.swing.JSlider();
        cmbCategory = new javax.swing.JComboBox();
        cmbBrand = new javax.swing.JComboBox();
        radHigh = new javax.swing.JRadioButton();
        lblStorageType = new javax.swing.JLabel();
        lblRange = new javax.swing.JLabel();
        radLow = new javax.swing.JRadioButton();
        lblDiscount1 = new javax.swing.JLabel();
        txtModelNumber = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        lblModelNumber = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblCategory = new javax.swing.JLabel();
        pnlButtons = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        pnlTableInfo = new javax.swing.JPanel();
        btnSortByPrice = new javax.swing.JButton();
        lblSortByBrand = new javax.swing.JLabel();
        txtSearchByPrice = new javax.swing.JTextField();
        lblSortByPrice = new javax.swing.JLabel();
        btnSearchByPrice = new javax.swing.JButton();
        lblSearchByPrice = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLaptopInfo = new javax.swing.JTable();
        btnStockLeft = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        cmbStockLeft = new javax.swing.JComboBox();
        txtDelete = new javax.swing.JTextField();
        btnSortByBrand = new javax.swing.JButton();
        pnlDateTime = new javax.swing.JPanel();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuImport = new javax.swing.JMenuItem();
        menuItemSeparator = new javax.swing.JPopupMenu.Separator();
        menuClose = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Laptop Info");
        setResizable(false);

        pnlInputs.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter Laptop Details", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tw Cen MT", 1, 16))); // NOI18N
        pnlInputs.setEnabled(false);

        btnGroupRadio.add(radMedium);
        radMedium.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        radMedium.setText("Medium");

        lblSliderQuantity.setFont(new java.awt.Font("Tw Cen MT", 0, 17)); // NOI18N
        lblSliderQuantity.setText("1");
        lblSliderQuantity.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                lblSliderQuantityHierarchyChanged(evt);
            }
        });
        lblSliderQuantity.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lblSliderQuantityPropertyChange(evt);
            }
        });

        cmbStorageType.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        cmbStorageType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HDD", "SSD", "HDD + SSD" }));

        lblBrand.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        lblBrand.setText("Brand");

        sldQuantity.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        sldQuantity.setMinimum(1);
        sldQuantity.setMinorTickSpacing(5);
        sldQuantity.setPaintTicks(true);
        sldQuantity.setToolTipText("");
        sldQuantity.setValue(0);
        sldQuantity.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sldQuantity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldQuantityStateChanged(evt);
            }
        });

        cmbCategory.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Notebook", "Ultrabook", "Convertible", "Macbook", "Chromebook" }));

        cmbBrand.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        cmbBrand.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HP", "Dell", "Apple", "Acer", "Lenovo", "Asus" }));
        cmbBrand.setPreferredSize(new java.awt.Dimension(110, 24));

        btnGroupRadio.add(radHigh);
        radHigh.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        radHigh.setText("High");

        lblStorageType.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        lblStorageType.setText("Storage Type");

        lblRange.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        lblRange.setText("Range");

        btnGroupRadio.add(radLow);
        radLow.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        radLow.setSelected(true);
        radLow.setText("Low");

        lblDiscount1.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        lblDiscount1.setText("Quantity");

        txtName.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        txtPrice.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txtPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPriceActionPerformed(evt);
            }
        });
        txtPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPriceKeyTyped(evt);
            }
        });

        lblPrice.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        lblPrice.setText("Price");

        lblModelNumber.setBackground(new java.awt.Color(255, 255, 255));
        lblModelNumber.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        lblModelNumber.setText("Model Number");

        lblName.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        lblName.setText("Name");

        lblCategory.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        lblCategory.setText("Category");

        javax.swing.GroupLayout pnlInputsLayout = new javax.swing.GroupLayout(pnlInputs);
        pnlInputs.setLayout(pnlInputsLayout);
        pnlInputsLayout.setHorizontalGroup(
            pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName)
                    .addComponent(lblCategory)
                    .addComponent(lblModelNumber)
                    .addComponent(lblBrand))
                .addGap(18, 18, 18)
                .addGroup(pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbBrand, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtName)
                    .addComponent(txtModelNumber))
                .addGroup(pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInputsLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDiscount1)
                            .addComponent(lblRange)
                            .addComponent(lblPrice)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInputsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStorageType)))
                .addGap(18, 18, 18)
                .addGroup(pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInputsLayout.createSequentialGroup()
                        .addComponent(sldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblSliderQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInputsLayout.createSequentialGroup()
                        .addComponent(radLow)
                        .addGap(18, 18, 18)
                        .addComponent(radMedium)
                        .addGap(18, 18, 18)
                        .addComponent(radHigh))
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbStorageType, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlInputsLayout.setVerticalGroup(
            pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputsLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModelNumber)
                    .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrice)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRange)
                    .addComponent(radLow)
                    .addComponent(radMedium)
                    .addComponent(radHigh))
                .addGap(20, 20, 20)
                .addGroup(pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInputsLayout.createSequentialGroup()
                        .addGroup(pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblCategory)
                                .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblDiscount1))
                            .addComponent(sldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(pnlInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStorageType)
                            .addComponent(cmbStorageType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBrand)
                            .addComponent(cmbBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblSliderQuantity))
                .addContainerGap())
        );

        pnlButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tw Cen MT", 1, 16))); // NOI18N

        btnAdd.setFont(new java.awt.Font("Tw Cen MT", 1, 16)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/add.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setIconTextGap(5);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Tw Cen MT", 1, 16)); // NOI18N
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/clear.png.png"))); // NOI18N
        btnClear.setText("Clear");
        btnClear.setIconTextGap(5);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonsLayout = new javax.swing.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlButtonsLayout.createSequentialGroup()
                .addContainerGap(111, Short.MAX_VALUE)
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(111, 111, 111))
        );
        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear)
                .addContainerGap())
        );

        btnSortByPrice.setFont(new java.awt.Font("Tw Cen MT", 1, 16)); // NOI18N
        btnSortByPrice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/sort.png"))); // NOI18N
        btnSortByPrice.setText("Sort");
        btnSortByPrice.setIconTextGap(5);
        btnSortByPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortByPriceActionPerformed(evt);
            }
        });

        lblSortByBrand.setFont(new java.awt.Font("Tw Cen MT", 1, 16)); // NOI18N
        lblSortByBrand.setText("Sort by Brand");

        txtSearchByPrice.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txtSearchByPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchByPriceActionPerformed(evt);
            }
        });

        lblSortByPrice.setFont(new java.awt.Font("Tw Cen MT", 1, 16)); // NOI18N
        lblSortByPrice.setText("Sort by Price");

        btnSearchByPrice.setBackground(new java.awt.Color(255, 255, 255));
        btnSearchByPrice.setFont(new java.awt.Font("Tw Cen MT", 1, 16)); // NOI18N
        btnSearchByPrice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/search.png"))); // NOI18N
        btnSearchByPrice.setIconTextGap(5);
        btnSearchByPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByPriceActionPerformed(evt);
            }
        });

        lblSearchByPrice.setFont(new java.awt.Font("Tw Cen MT", 1, 16)); // NOI18N
        lblSearchByPrice.setText("Search by Price");

        tblLaptopInfo.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        tblLaptopInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Model No", "Name", "Category", "Brand", "Price", "Range", "Quantity", "Storage Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLaptopInfo.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tblLaptopInfo.setShowHorizontalLines(false);
        tblLaptopInfo.setShowVerticalLines(false);
        tblLaptopInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLaptopInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblLaptopInfo);
        if (tblLaptopInfo.getColumnModel().getColumnCount() > 0) {
            tblLaptopInfo.getColumnModel().getColumn(0).setResizable(false);
            tblLaptopInfo.getColumnModel().getColumn(0).setPreferredWidth(150);
            tblLaptopInfo.getColumnModel().getColumn(1).setResizable(false);
            tblLaptopInfo.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblLaptopInfo.getColumnModel().getColumn(2).setResizable(false);
            tblLaptopInfo.getColumnModel().getColumn(2).setPreferredWidth(150);
            tblLaptopInfo.getColumnModel().getColumn(3).setResizable(false);
            tblLaptopInfo.getColumnModel().getColumn(3).setPreferredWidth(150);
            tblLaptopInfo.getColumnModel().getColumn(4).setResizable(false);
            tblLaptopInfo.getColumnModel().getColumn(4).setPreferredWidth(150);
            tblLaptopInfo.getColumnModel().getColumn(5).setResizable(false);
            tblLaptopInfo.getColumnModel().getColumn(5).setPreferredWidth(150);
            tblLaptopInfo.getColumnModel().getColumn(6).setResizable(false);
            tblLaptopInfo.getColumnModel().getColumn(6).setPreferredWidth(150);
            tblLaptopInfo.getColumnModel().getColumn(7).setResizable(false);
            tblLaptopInfo.getColumnModel().getColumn(7).setPreferredWidth(150);
        }

        btnStockLeft.setFont(new java.awt.Font("Tw Cen MT", 1, 16)); // NOI18N
        btnStockLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/stock.png"))); // NOI18N
        btnStockLeft.setText("Stock");
        btnStockLeft.setIconTextGap(5);
        btnStockLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStockLeftActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(0, 102, 153));
        btnSave.setFont(new java.awt.Font("Tw Cen MT", 1, 16)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/save.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.setIconTextGap(5);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(204, 0, 51));
        btnDelete.setFont(new java.awt.Font("Tw Cen MT", 1, 16)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(240, 240, 240));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/delete (2).png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        btnDelete.setIconTextGap(5);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        cmbStockLeft.setFont(new java.awt.Font("Tw Cen MT", 0, 16)); // NOI18N
        cmbStockLeft.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Notebook", "Ultrabook", "Convertible", "Macbook", "Chromebook" }));
        cmbStockLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStockLeftActionPerformed(evt);
            }
        });

        txtDelete.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txtDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDeleteActionPerformed(evt);
            }
        });
        txtDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDeleteKeyTyped(evt);
            }
        });

        btnSortByBrand.setFont(new java.awt.Font("Tw Cen MT", 1, 16)); // NOI18N
        btnSortByBrand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/sort.png"))); // NOI18N
        btnSortByBrand.setText("Sort");
        btnSortByBrand.setIconTextGap(5);
        btnSortByBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortByBrandActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTableInfoLayout = new javax.swing.GroupLayout(pnlTableInfo);
        pnlTableInfo.setLayout(pnlTableInfoLayout);
        pnlTableInfoLayout.setHorizontalGroup(
            pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableInfoLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTableInfoLayout.createSequentialGroup()
                        .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSortByPrice)
                            .addComponent(lblSortByPrice))
                        .addGap(100, 100, 100)
                        .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSortByBrand)
                            .addComponent(btnSortByBrand))
                        .addGap(139, 139, 139)
                        .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSearchByPrice)
                            .addGroup(pnlTableInfoLayout.createSequentialGroup()
                                .addComponent(txtSearchByPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearchByPrice)))
                        .addGap(224, 224, 224)
                        .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnStockLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbStockLeft, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTableInfoLayout.createSequentialGroup()
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(txtDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 947, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );
        pnlTableInfoLayout.setVerticalGroup(
            pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableInfoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSortByPrice)
                        .addComponent(lblSortByBrand)
                        .addComponent(lblSearchByPrice))
                    .addComponent(btnStockLeft))
                .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTableInfoLayout.createSequentialGroup()
                        .addComponent(cmbStockLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(pnlTableInfoLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSearchByPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnSortByPrice)
                                .addComponent(btnSortByBrand)
                                .addComponent(txtSearchByPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(16, 16, 16)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTableInfoLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(pnlTableInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDelete)
                            .addComponent(txtDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlTableInfoLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnSave)))
                .addGap(20, 20, 20))
        );

        pnlDateTime.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tw Cen MT", 1, 16))); // NOI18N

        lblDate.setFont(new java.awt.Font("Tw Cen MT", 1, 17)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 51, 51));

        lblTime.setFont(new java.awt.Font("Tw Cen MT", 1, 17)); // NOI18N
        lblTime.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout pnlDateTimeLayout = new javax.swing.GroupLayout(pnlDateTime);
        pnlDateTime.setLayout(pnlDateTimeLayout);
        pnlDateTimeLayout.setHorizontalGroup(
            pnlDateTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDateTimeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlDateTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65))
        );
        pnlDateTimeLayout.setVerticalGroup(
            pnlDateTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDateTimeLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));

        menuFile.setText("File");
        menuFile.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        menuImport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menuImport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/open.png"))); // NOI18N
        menuImport.setText("Import");
        menuImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImportActionPerformed(evt);
            }
        });
        menuFile.add(menuImport);
        menuFile.add(menuItemSeparator);

        menuClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/close.png"))); // NOI18N
        menuClose.setText("Close");
        menuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCloseActionPerformed(evt);
            }
        });
        menuFile.add(menuClose);

        jMenuBar1.add(menuFile);

        menuHelp.setText("Help");
        menuHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHelpActionPerformed(evt);
            }
        });
        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(pnlInputs, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDateTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
            .addComponent(pnlTableInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnlInputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addComponent(pnlTableInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblSliderQuantityPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lblSliderQuantityPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_lblSliderQuantityPropertyChange

    private void lblSliderQuantityHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_lblSliderQuantityHierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_lblSliderQuantityHierarchyChanged

    private void sldQuantityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldQuantityStateChanged
        // TODO add your handling code here:
        lblSliderQuantity.setText(Integer.toString(sldQuantity.getValue()));
    }//GEN-LAST:event_sldQuantityStateChanged

    private void txtPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceActionPerformed

    private void txtSearchByPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchByPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchByPriceActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // This method is used to add details of a laptop into the table
        // At first the csv file is imported, then only other items can be added into the table via 'Enter Laptop Details' section
        // TODO add your handling code here:
        if (this.imported == false) {
            JOptionPane.showMessageDialog(rootPane, "Import the CSV File first", "INFORMATION", 1);
        } else {
            try {
                this.sortByPrice = false;
                this.sortByBrand = false;
                // Assigning user inputs to local variables
                String modelNo = txtModelNumber.getText().trim();
                String name = txtName.getText().trim();
                String category = cmbCategory.getSelectedItem().toString();
                String brand = cmbBrand.getSelectedItem().toString();
                String price = txtPrice.getText().trim();
                String quantity = lblSliderQuantity.getText();
                String storageType = cmbStorageType.getSelectedItem().toString();
                if (radLow.isSelected()) {
                    range = "Low";
                } else if (radMedium.isSelected()) {
                    range = "Medium";
                } else if (radHigh.isSelected()) {
                    range = "High";
                }
                // Getting DefaultTableModel from JTable 'tblLaptopInfo'
                DefaultTableModel model = (DefaultTableModel) tblLaptopInfo.getModel();
                // Checking if any input field is empty
                if (!modelNo.isEmpty() && !name.isEmpty() && !category.isEmpty() && !brand.isEmpty() && !price.isEmpty() && !quantity.isEmpty() && !storageType.isEmpty() && !range.isEmpty()) {
                    for (TableData k : list) {
                        if (modelNo.equals(k.getModelNumber())) { // If a laptop's model number matches with any existing model number, then a suitable warning message is displayed to the user
                            JOptionPane.showMessageDialog(rootPane, "Laptop with model number " + modelNo + " already exits in the table" + "\nPlease enter a unique model number", "WARNING", 2);
                            return;
                        }
                    }
                    // Creating an array of datatype String to store all the user inputs
                    String value[] = {modelNo, name, category, brand, price, range, quantity, storageType};
                    model.addRow(value);
                    list.add(new TableData(modelNo, name, category, brand, Integer.parseInt(price), range, quantity, storageType));
                    JOptionPane.showMessageDialog(rootPane, "Item added successfully", "INFORMATION", 1);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Empty field(s) found!  Please fill up all the fields.", "ERROR", 0);
                }
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(rootPane, "Please enter the Price in correct format", "WARNING", 2);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // This function is used to save the data present in the table in a given location in a .txt file        
        // TODO add your handling code here:       
        String path = "src\\file\\saved.txt"; // Path where the file is to be saved
        File file = new File(path);

        DefaultTableModel model = (DefaultTableModel) tblLaptopInfo.getModel();
        try (FileWriter save = new FileWriter(file)) {
            save.write("Model Number, Name, Category, Brand, Price, Range, Quantity, Storage Type");
            save.write(System.lineSeparator());
            for (int i = 0; i < tblLaptopInfo.getRowCount(); i++) {
                for (int j = 0; j < tblLaptopInfo.getColumnCount(); j++) {
                    save.write(tblLaptopInfo.getValueAt(i, j).toString() + ",");
                }
                save.write(System.lineSeparator()); // Writes a new line in the file
            }
            JOptionPane.showMessageDialog(rootPane, "File exported successfully", "INFORMATION", 1);
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(rootPane, "File exported successfully", "INFORMATION", 1);
        } catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(rootPane, "File not found");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        /* This method is used to emptify all textfields present in the 'Enter Laptop Details' panel, 
         and reset the values of all other components to their initial state */
        // TODO add your handling code here:
        txtModelNumber.setText("");
        txtName.setText("");
        cmbCategory.setSelectedIndex(0);
        cmbBrand.setSelectedIndex(0);
        txtPrice.setText("");
        radLow.setSelected(true);
        sldQuantity.setValue(0);
        cmbStorageType.setSelectedIndex(0);
    }//GEN-LAST:event_btnClearActionPerformed

    private void menuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCloseActionPerformed
        // TODO add your handling code here:
        // This method is used to close the application
        System.exit(0);
    }//GEN-LAST:event_menuCloseActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        /* This method is used to delete a specific record from the table
         * For removing the details of a particular laptop, laptop's model number must be provided
         * If a laptop with a certain model number is not present in the table, then a suitable message is displayed on the screen
         */
        // TODO add your handling code here:
        int rowCount = tblLaptopInfo.getRowCount(); // Returns total number of existing rows in the table
        if (txtDelete.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Empty field found!  Please enter the item's model number to delete it", "ERROR", 2);
            return;
        } else if (rowCount == 0) {
            JOptionPane.showMessageDialog(rootPane, "There are no items in the table", "INFORMATION", 1);
            return;
        }
        String modelNum = txtDelete.getText();
        DefaultTableModel model = (DefaultTableModel) tblLaptopInfo.getModel();
        for (int i = 0; i < rowCount; i++) {
            String m = tblLaptopInfo.getValueAt(i, 0).toString(); // Getting model number of every laptop stored in the table
            /* If the model number entered is equal to model number of any laptop, then
             * the laptops' details with the given model number are removed from the table
             * If not, then a suitable information message is displayed on the screen
             */
            if (modelNum.equals(m)) {
                int dialogButton = JOptionPane.showConfirmDialog(rootPane, "Do you really want to delete?", "WARNING", JOptionPane.YES_NO_OPTION);
                if (dialogButton == JOptionPane.YES_OPTION) {
                    model.removeRow(i); // Removes data from the table
                    list.remove(i); // Removes data from the arraylist
                    JOptionPane.showMessageDialog(rootPane, "Item with model number " + modelNum + " is deleted successfully", "INFORMATION", 1);
                    return;
                } else if (dialogButton == JOptionPane.NO_OPTION) {
                    return;
                }
            }
        }
        JOptionPane.showMessageDialog(rootPane, "Laptop with model number " + modelNum + " does not exit", "INFORMATION", 1);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblLaptopInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLaptopInfoMouseClicked
        // This function returns the index of the selected row of the table and sets it in the 'Delete' field
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblLaptopInfo.getModel();
        int selectedRowIndex = tblLaptopInfo.getSelectedRow(); // Getting index of selected row
        txtDelete.setText(tblLaptopInfo.getValueAt(selectedRowIndex, 0).toString());
    }//GEN-LAST:event_tblLaptopInfoMouseClicked

    private void txtPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceKeyTyped
        // This function restricts the user to enter any character other than 0,1,2,3,4,5,6,7,8,9
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (!(key >= '0' && key <= '9') && !(key == '.')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPriceKeyTyped

    private void menuImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImportActionPerformed
        // TODO add your handling code here:
        // This method is used to import data from a file into the table

        String path = "src//file//test.txt"; // Path of the file which is to be imported
        File file = new File(path);
        // If the csv file is already imported, then a suitable information message is displayed on the screen,
        if (this.imported == true) {
            JOptionPane.showMessageDialog(rootPane, "The file has already been imported", "INFORMATION", 1);
            // If the csv file is not imported, then following blocks of code are executed 
        } else {
            try {
                BufferedReader br = new BufferedReader(new FileReader(file));
                String firstLine = br.readLine().trim();
                DefaultTableModel model = (DefaultTableModel) tblLaptopInfo.getModel();
                Object[] tableLines = br.lines().toArray();
                for (int i = 0; i < tableLines.length; i++) {
                    String line = tableLines[i].toString().trim();
                    dataRow = line.split(",");
                    String modelNo = dataRow[0];
                    String name = dataRow[1];
                    String category = dataRow[2];
                    String brand = dataRow[3];
                    String price = dataRow[4];
                    String range = dataRow[5];
                    String quantity = dataRow[6];
                    String storageType = dataRow[7];
                    model.addRow(dataRow);
                    list.add(new TableData(modelNo, name, category, brand, Integer.parseInt(price), range, quantity, storageType));
                }
                this.imported = true;
                JOptionPane.showMessageDialog(rootPane, "The file has been imported successfully.", "INFORMATION", 1);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e, "ERROR", 0);
            }
        }
    }//GEN-LAST:event_menuImportActionPerformed

    private void txtDeleteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDeleteKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDeleteKeyTyped

    private void btnSortByPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortByPriceActionPerformed
        // TODO add your handling code here:
        this.sortByBrand = false;
        if (tblLaptopInfo.getRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "The table is empty", "INFORMATION", 1);
        } else if (sortByPrice == true) { //if sorted is true then display the user the appropriate dialog box
            JOptionPane.showMessageDialog(rootPane, "The table is already sorted by price", "Information", JOptionPane.INFORMATION_MESSAGE);
        } //otherwise do this
        else {
            // implementing selection sort algorithm
            for (int i = 0; i < list.size() - 1; i++) {
                int minIndex = i;
                for (int j = i + 1; j < list.size(); j++) {
                    if (list.get(minIndex).getPrice() > list.get(j).getPrice()) {
                        minIndex = j;
                    }
                }
                Collections.swap(list, minIndex, i); // pushing the minimum value to the i index of the list
            }

            //get the table model
            DefaultTableModel model = (DefaultTableModel) tblLaptopInfo.getModel();
            // setting row count to zero
            model.setRowCount(0);

            for (TableData k : list) {
                String values[] = {k.getModelNumber(), k.getName(), k.getCategory(), k.getBrand(), String.valueOf(k.getPrice()), k.getRange(),
                    k.getQuantity(), k.getStorageType()};
                model.addRow(values);
            }
            this.sortByPrice = true;
        }
    }//GEN-LAST:event_btnSortByPriceActionPerformed

    private void btnSearchByPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByPriceActionPerformed
        // TODO add your handling code here:
        //get the input from user
        String search = txtSearchByPrice.getText();

        //if the search value is null then do
        if (search.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please Input values in the text field while searching.", "Error", JOptionPane.ERROR_MESSAGE);

        } //otherwise do
        else {

            try {

                if (sortByPrice == false)//if the table is unsorted show message to user to sort.
                {

                    JOptionPane.showMessageDialog(rootPane, "Please sort the table first", "Information", JOptionPane.INFORMATION_MESSAGE);
                } //If the table is sorted then do
                else {
                    //make a model for table

                    DefaultTableModel model = (DefaultTableModel) tblLaptopInfo.getModel();

                    //an arraylist to store al the contents that come from table
                    ArrayList tabcontents = new ArrayList();

                    int rows = model.getRowCount();//get the number of rows in the table
                    int cols = model.getColumnCount();//get number of columns in the table

                    //Now let's run a loop to iterate each item in the jtable and add them
                    //to the arraylist of tabcontents.
                    for (int i = 0; i < rows; i++) {
                        for (int j = 0; j < cols; j++) {

                            tabcontents.add(model.getValueAt(i, j));//adds everything to the arraylist

                        }

                    }

                    //now everything is placed in order
                    ArrayList<Integer> price = new ArrayList();//store all the sorted prices in this arraylist

                    //run a loop
                    for (int i = 5; i < tabcontents.size(); i = i + 9) {

                        //since the prices in the tab are of object type first convert them into string
                        //only then perse them to integer
                        if (tabcontents.get(i) instanceof String) {
                            Integer p = Integer.valueOf((String) tabcontents.get(i));
                            price.add(p);
                        }
                        //but some are already integers so parse them to integers
                        if (tabcontents.get(i) instanceof Integer) {

                            Integer p = (Integer) tabcontents.get(i);
                            price.add(p);
                        }
                    }

                    //after everything is added call BinarySearchfunction 
                    BinarySearch(price, search);
                }

            } //only exception is number formatexception when a user can input numeric values only.
            catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Input only numeric values in the field of price", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnSearchByPriceActionPerformed

    private void btnStockLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStockLeftActionPerformed
        // TODO add your handling code here:
        if (tblLaptopInfo.getRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "The table is empty", "INFORMATION", 1);
        } else {
            try {
                DefaultTableModel model = (DefaultTableModel) tblLaptopInfo.getModel();
                String itemAvailable = (String) cmbStockLeft.getSelectedItem();
                int count = 0;
                for (int i = 0; i < model.getRowCount(); i++) {
                    String tblCategory = (String) model.getValueAt(i, 2);
                    if (itemAvailable.equals(tblCategory)) {
                        count += Integer.parseInt((String) model.getValueAt(i, 6));
                    }
                }
                if (count == 0) {
                    JOptionPane.showMessageDialog(rootPane, "There are no any laptop of " + itemAvailable + " category");
                } else if (count == 1) {
                    JOptionPane.showMessageDialog(rootPane, "There is " + count + " laptop of " + itemAvailable + " category");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "There are " + count + " laptops of " + itemAvailable + " category");
                }
            } catch (NumberFormatException | HeadlessException e) {
                JOptionPane.showMessageDialog(rootPane, "The Quantity column in the table cotains a value that is not a number", "ERROR", 0);
            }
        }
    }//GEN-LAST:event_btnStockLeftActionPerformed

    private void btnSortByBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortByBrandActionPerformed
        this.sortByPrice = false;
        try {
            if (tblLaptopInfo.getRowCount() == 0) {
                JOptionPane.showMessageDialog(rootPane, "The table is empty", "INFORMATION", 1);
            } else if (sortByBrand == true) { //if sorted is true then display the user the appropriate dialog box
                JOptionPane.showMessageDialog(rootPane, "The table is already sorted by brand", "Information", JOptionPane.INFORMATION_MESSAGE);
            } //otherwise do this
            else {
                for (int i = 0; i < list.size() - 1; i++) {
                    int minIndex = i;
                    for (int j = i + 1; j < list.size(); j++) {
                        if (list.get(j).getBrand().compareTo(list.get(minIndex).getBrand()) < 0) {
                            minIndex = j;
                        }
                    }
                    Collections.swap(list, minIndex, i);
                }
                //get the table model
                DefaultTableModel model = (DefaultTableModel) tblLaptopInfo.getModel();
                // setting row count to zero
                model.setRowCount(0);

                for (TableData k : list) {
                    String values[] = {k.getModelNumber(), k.getName(), k.getCategory(), k.getBrand(), String.valueOf(k.getPrice()), k.getRange(),
                        k.getQuantity(), k.getStorageType()};
                    model.addRow(values);
                }
                this.sortByBrand = true;

            }
        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(rootPane, "The table contains the vlaue with alphabets in price section", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSortByBrandActionPerformed

    private void cmbStockLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStockLeftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbStockLeftActionPerformed

    private void menuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHelpActionPerformed
        // TODO add your handling code here:
        String path = "src\\file\\test.txt";
        try {
            File file = new File(path);
            if (file.exists()) {
                Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + path);
            } else {
                JOptionPane.showMessageDialog(rootPane, "File does not exist", "ERROR", 0);
            }
        } catch (IOException | HeadlessException e) {
            JOptionPane.showMessageDialog(rootPane, "Error while importing file", "ERROR", 0);
        }
    }//GEN-LAST:event_menuHelpActionPerformed

//method Binary search
    public void BinarySearch(ArrayList prices, String text) {

        //before startng lets do this
        boolean found = false;

        int search = Integer.parseInt(text);//get the text used by user

        int lowindex = 0;//lowindex=0
        int highindex = prices.size() - 1;
        int midindex;//midinex

        DefaultTableModel model = (DefaultTableModel) tblLaptopInfo.getModel();//make a model

        //do binary search
        while (lowindex <= highindex) {

            midindex = (lowindex + highindex) / 2;//midincex

            int midelement = (Integer) prices.get(midindex);//midvalue

            //1. If search value equals midelement diplay the sucessmessage to user 
            if (midelement == search) {

                String modelNo = (String) model.getValueAt(midindex, 1);
                String name = (String) model.getValueAt(midindex, 2);
                String category = (String) model.getValueAt(midindex, 3);
                String brand = (String) model.getValueAt(midindex, 4);
                String price = (String) model.getValueAt(midindex, 5);
                String range = (String) model.getValueAt(midindex, 6);
                String quantity = (String) model.getValueAt(midindex, 7);
                String discount = (String) model.getValueAt(midindex, 8);

                JOptionPane.showMessageDialog(rootPane, "Model Id: " + modelNo + "\n"
                        + "Model Number: " + name + "\n"
                        + "Category: " + category + "\n"
                        + "Brand: " + brand + "\n"
                        + "Price: " + price + "\n"
                        + "Range: " + range + "\n"
                        + "Quantity: " + quantity + "\n"
                        + "Discount: " + discount,
                        "Laptop Details", JOptionPane.INFORMATION_MESSAGE);
                found = true;
                break;
                //If a vlaue is found break out of loop
            } else if (midelement > search) {
                highindex = midindex - 1;

            } else if (midelement < search) {
                lowindex = midindex + 1;

            }

        }
        //after all the seaching f there are no elemets then display the information message to the user
        if (found == false) {
            JOptionPane.showMessageDialog(rootPane, "The price you entered is not present in the list", "Price not found", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    //  javax.swing.UIManager.put("control", new java.awt.Color(153, 204, 255));
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AppliancesInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.ButtonGroup btnGroupRadio;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchByPrice;
    private javax.swing.JButton btnSortByBrand;
    private javax.swing.JButton btnSortByPrice;
    private javax.swing.JButton btnStockLeft;
    private javax.swing.JComboBox cmbBrand;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JComboBox cmbStockLeft;
    private javax.swing.JComboBox cmbStorageType;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBrand;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDiscount1;
    private javax.swing.JLabel lblModelNumber;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblRange;
    private javax.swing.JLabel lblSearchByPrice;
    private javax.swing.JLabel lblSliderQuantity;
    private javax.swing.JLabel lblSortByBrand;
    private javax.swing.JLabel lblSortByPrice;
    private javax.swing.JLabel lblStorageType;
    private javax.swing.JLabel lblTime;
    private javax.swing.JMenuItem menuClose;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuImport;
    private javax.swing.JPopupMenu.Separator menuItemSeparator;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlDateTime;
    private javax.swing.JPanel pnlInputs;
    private javax.swing.JPanel pnlTableInfo;
    private javax.swing.JRadioButton radHigh;
    private javax.swing.JRadioButton radLow;
    private javax.swing.JRadioButton radMedium;
    private javax.swing.JSlider sldQuantity;
    private javax.swing.JTable tblLaptopInfo;
    private javax.swing.JTextField txtDelete;
    private javax.swing.JTextField txtModelNumber;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtSearchByPrice;
    // End of variables declaration//GEN-END:variables

    private ActionListener ActionListener() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
